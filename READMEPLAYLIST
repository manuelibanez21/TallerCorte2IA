# README ‚Äî ACO para recomendaci√≥n de playlists (Repertorio de Metallica)

**Resumen corto:**  
Este proyecto implementa un recomendador de playlists usando **Ant Colony Optimization (ACO)** sobre un repertorio manual (Metallica). El algoritmo construye playlists sugeridas (secuencias de canciones) optimizando la afinidad con las preferencias del usuario y la coherencia entre canciones. El c√≥digo principal est√° en `playliststaller3.py`.

---

## 1. Descripci√≥n del proyecto

Este ejercicio demuestra c√≥mo aplicar ACO para generar playlists coherentes y personalizadas a partir de un cat√°logo curado. En lugar de trabajar con datos aleatorios, las canciones est√°n definidas manualmente (atributos: √°lbum/era, `energia`, `valencia`) para mantener control art√≠stico sobre el cat√°logo. El objetivo es que varias hormigas (soluciones candidatas) exploren y, mediante feromonas y heur√≠sticas de similitud/afinidad, convergezcan hacia playlists con mayor preferencia para un usuario.

---

## 2. Requisitos e instalaci√≥n

**Requisitos m√≠nimos:**
- Python 3.8+  
- Paquetes: `numpy` (y `random` que viene con Python)

**Instalaci√≥n r√°pida**
```bash
pip install numpy
```

**Ejecuci√≥n:**
```bash
python playliststaller3.py
```

---

## 3. Explicaci√≥n del algoritmo

### Cat√°logo
Cada canci√≥n est√° definida manualmente con:
- Nombre
- √Ålbum (clave con peso simb√≥lico)
- Energ√≠a (0‚Äì1)
- Valencia (positividad emocional, 0‚Äì1)

### Preferencias del usuario
Ejemplo:
```python
preferencias_usuario = {'RTL': 0.5, 'energia': 0.8, 'valencia': 0.7}
```
Esto representa la afinidad deseada por √°lbum y estilo emocional.

### L√≥gica ACO
- **Feromonas:** cada par de canciones tiene un rastro de feromona que se actualiza.  
- **Similitud:** heur√≠stica entre canciones (coseno entre vectores).  
- **Afinidad:** qu√© tan bien una canci√≥n coincide con las preferencias del usuario.  
- **Hormigas:** cada una genera una playlist candidata y refuerza combinaciones prometedoras.

### Proceso
1. Inicializar feromonas.  
2. Cada hormiga crea una playlist.  
3. Calcular su calidad promedio.  
4. Actualizar feromonas.  
5. Repetir por varias iteraciones.  

### Resultado
El sistema devuelve una secuencia de canciones que maximiza la afinidad y coherencia musical.

---

## 4. Par√°metros clave

| Par√°metro | Descripci√≥n | Valor por defecto |
|------------|--------------|-------------------|
| `NUM_HORMIGAS` | N√∫mero de hormigas por iteraci√≥n | 20 |
| `NUM_ITER` | Iteraciones totales | 50 |
| `ALPHA` | Peso de feromonas | 1 |
| `BETA` | Peso de la heur√≠stica (similitud) | 2 |
| `RHO` | Tasa de evaporaci√≥n | 0.3 |
| `Q` | Escala de refuerzo | 100 |

---

## 5. Salida esperada

Durante la ejecuci√≥n se muestran iteraciones como:

```
Iter 1: mejor calidad = 0.621
Iter 2: mejor calidad = 0.645
...
Iter 50: mejor calidad = 0.732
```

Al final:
```
üé∂ Playlist recomendada:
‚ñ∂Ô∏è Enter Sandman: {'The black album': 0.1, 'energia': 0.95, 'valencia': 0.4}
‚ñ∂Ô∏è Fade to Black: {...}
...
```

---

## 6. Posibles mejoras

- Agregar m√°s atributos musicales (tempo, popularidad, ac√∫stica).
- Permitir ajuste din√°mico de preferencias del usuario.
- Conectarse a la API de Spotify para obtener datos reales.
- Graficar la evoluci√≥n de la calidad promedio de las playlists.
- Incluir visualizaci√≥n energ√©tica y emocional de la playlist final.

---


